buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE")
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}
plugins {
    id "nebula.os-package" version "2.2.6"
    id 'com.github.sherter.google-java-format' version '0.6'
    id "com.google.protobuf" version "0.8.4"
}
group 'io.elastest.epm'

repositories {
    mavenCentral()
}
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
}

project.ext {
    /**
     * Application Related Version
     */
    springVersion = '4.3.9.RELEASE'
    springBootVersion = '1.5.4.RELEASE'
    springFoxVersion = '2.7.0'
    grpcVersion = "1.6.1"
    /**
     * Application Related Version
     */
    applicationDate = new Date()
    applicationVersion = version
    applicationVersionDebian = "1";
    applicationVersionFull = "${applicationVersion}"
}
dependencies {
    compile group: 'org.pacesys', name: 'openstack4j', version: '3.1.0'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion

    // https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.11.4.RELEASE'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
    // https://mvnrepository.com/artifact/org.hsqldb/hsqldb
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.2'

    //    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.0.3'
    compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '1.6.2'

    compile 'com.google.code.gson:gson:2.8.0'

    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    compile group: 'io.springfox', name: 'springfox-swagger2', version: springFoxVersion
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springFoxVersion

    // https://mvnrepository.com/artifact/org.springframework.data/spring-data-jpa
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.11.4.RELEASE'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.9.9'

    // https://mvnrepository.com/artifact/com.github.docker-java/docker-java
    compile group: 'com.github.docker-java', name: 'docker-java', version: '3.0.12'

    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.17'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.0'

    // https://mvnrepository.com/artifact/org.kamranzafar/jtar
    compile group: 'org.kamranzafar', name: 'jtar', version: '2.3'

    // https://mvnrepository.com/artifact/io.grpc/grpc-stub
    compile group: 'io.grpc', name: 'grpc-stub', version: grpcVersion

    // https://mvnrepository.com/artifact/io.grpc/grpc-protobuf
    compile group: 'io.grpc', name: 'grpc-netty', version: grpcVersion

    // https://mvnrepository.com/artifact/io.grpc/grpc-protobuf
    compile group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion

    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.19'

    // https://mvnrepository.com/artifact/com.jcraft/jsch
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'


    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'


    // https://mvnrepository.com/artifact/org.mockito/mockito-all
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'


    // https://mvnrepository.com/artifact/org.springframework/spring-test
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.3.9.RELEASE'


    // https://mvnrepository.com/artifact/junit/junit
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.powermock/powermock-mockito-release-full
    testCompile group: 'org.powermock', name: 'powermock-mockito-release-full', version: '1.6.4'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.4.RELEASE'

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.1.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.enabled = project.hasProperty('runProtobuf')
            task.builtins {
                java {
                    outputSubDir = 'generated-protobuf'
                }
            }
        }
    }

    generatedFilesBaseDir = "${projectDir}/src/"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/generated-protobuf/*',
                              '*.class',
                              '**/api/*',
                              '**/pop/*'])
        })
    }
}


bootRepackage {
    mainClass = 'io.elastest.epm.main.Application'
}

task buildDocker(type: Docker) {
    dockerfile = 'docker/elastest-platform-manager/Dockerfile'
    addFile {
        from jar
    }
    tag = 'elastest/elastest-platform-manager'
}

task buildDockerFromScratch(type: Docker) {
    baseImage = 'openjdk:8-jre-alpine'
    push = project.hasProperty('push')
    tag = 'elastest/elastest-platform-manager'
    addFile {
        from jar
        rename {'epm.jar'}
    }
    entryPoint(['java', '-jar', '/epm.jar'])
    exposePort(8180)
}
buildDocker.dependsOn(build)

compileJava.dependsOn tasks.googleJavaFormat

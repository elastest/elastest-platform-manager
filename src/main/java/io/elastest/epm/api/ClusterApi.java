/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.elastest.epm.api;

import io.elastest.epm.api.body.ClusterFromResourceGroup;
import io.elastest.epm.model.Cluster;
import io.elastest.epm.model.Worker;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-12T11:29:25.083+02:00")

@Api(value = "cluster", description = "the cluster API")
public interface ClusterApi {

    @ApiOperation(value = "Adds a worker to the cluster.", nickname = "addWorker", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/cluster/{id}/add/{machineId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> addWorker(@ApiParam(value = "ID of Cluster",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of either a Worker or a VDU, which will be added to the cluster",required=true) @PathVariable("machineId") String machineId);


    @ApiOperation(value = "Creates a new cluster.", nickname = "createCluster", notes = "Receives an Identifier for a ResourceGroup and an array of types to setup the Resource Group as a cluster.", response = Cluster.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Cluster created", response = Cluster.class),
            @ApiResponse(code = 201, message = "Created"),
            @ApiResponse(code = 400, message = "Bad Request", response = String.class),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 403, message = "Forbidden"),
            @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/cluster/create",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Cluster> createCluster(@ApiParam(value = "Body to create Cluster from ResourceGroup" ,required=true )  @Valid @RequestBody ClusterFromResourceGroup clusterFromResourceGroup);


    @ApiOperation(value = "Deletes a Cluster.", nickname = "deleteCluster", notes = "Deletes the Cluster that matches with a given ID.", response = String.class, tags={ "Cluster", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cluster deleted successfully", response = String.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Cluster not found", response = String.class) })
    @RequestMapping(value = "/cluster/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteCluster(@ApiParam(value = "ID of Cluster",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Returns all clusters", nickname = "getAllClusters", notes = "", response = Cluster.class, responseContainer = "List", tags={ "Cluster", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Cluster.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/cluster",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cluster>> getAllClusters();

    @ApiOperation(value = "Registers the cluster and saves the information.", notes = "This registers a cluster with the information provided.", response = Cluster.class, tags={ "Cluster", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Cluster registered OK", response = Cluster.class),
            @ApiResponse(code = 201, message = "Created", response = Void.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Void.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
            @ApiResponse(code = 404, message = "Not Found/keys", response = Void.class) })

    @RequestMapping(value = "/cluster",
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Cluster> registerCluster(@ApiParam(value = "cluster in a json" ,required=true )  @Valid @RequestBody Cluster body);

    @ApiOperation(value = "Removes a worker to the cluster.", nickname = "removeNode", notes = "", response = Cluster.class, tags={ "Cluster", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Cluster.class),
            @ApiResponse(code = 401, message = "Unauthorized"),
            @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/cluster/{id}/remove/{workerId}",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Cluster> removeNode(@ApiParam(value = "ID of Cluster",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of a Worker",required=true) @PathVariable("workerId") String workerId);




    @ApiOperation(value = "Sets up the specified cluster to install the specified technology and connected it.", nickname = "setUpCluster", notes = "", response = String.class, tags={ "Cluster", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/cluster/{id}/{type}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> setUpCluster(@ApiParam(value = "ID of Cluster",required=true) @PathVariable("id") String id,@ApiParam(value = "type of technology",required=true) @PathVariable("type") String type);

}

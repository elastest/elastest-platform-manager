/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.elastest.epm.api;

import io.elastest.epm.api.body.WorkerFromVDU;
import io.elastest.epm.model.Worker;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-16T12:11:59.493+02:00")

@Api(value = "workers", description = "the workers API")
public interface WorkersApi {

    @ApiOperation(value = "Creates a new worker.", nickname = "createWorker", notes = "Receives a package that can be used for creating a new worker.", response = Worker.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Workers created", response = Worker.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/workers/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Worker> createWorker(@ApiParam(value = "Body to create Worker from VDU" ,required=true )  @Valid @RequestBody WorkerFromVDU workerFromVDU);


    @ApiOperation(value = "Deletes a Worker.", nickname = "deleteWorker", notes = "Deletes the Worker that matches with a given ID.", response = String.class, tags={ "Worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Worker deleted successfully", response = String.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Worker not found", response = String.class) })
    @RequestMapping(value = "/workers/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteWorker(@ApiParam(value = "ID of Worker",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Returns all registered workers", nickname = "getAllWorkers", notes = "", response = Worker.class, responseContainer = "List", tags={ "Worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Worker.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/workers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Worker>> getAllWorkers();


    @ApiOperation(value = "Sets up the specified worker to install the specified type of adapter.", nickname = "installAdapter", notes = "", response = String.class, tags={ "Worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/workers/{id}/{type}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> installAdapter(@ApiParam(value = "ID of Worker",required=true) @PathVariable("id") String id,@ApiParam(value = "type of adapter",required=true) @PathVariable("type") String type);


    @ApiOperation(value = "Registers the worker and saves the information.", nickname = "registerWorker", notes = "This registers a worker with the information provided.", response = Worker.class, tags={ "Worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Worker registered OK", response = Worker.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found/keys") })
    @RequestMapping(value = "/workers",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Worker> registerWorker(@ApiParam(value = "worker in a json" ,required=true )  @Valid @RequestBody Worker body);

}
